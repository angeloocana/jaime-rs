{"version":3,"sources":["../dist-esnext/index.js"],"names":["getCsvData","convertCsvLine","convertCsvToArray","rotateByCosAndSin","getAngleToRad","rotateArray","fileName","fullPath","join","__dirname","readFileSync","line","split","data","map","cos","sin","x","y","newX","newY","angle","Math","PI","getCos","memoize","getSin","rotateByAngle","array","reduce","accLine","concat","accRow","value"],"mappings":";;;;;;QAGgBA,U,GAAAA,U;QAOAC,c,GAAAA,c;QAGAC,iB,GAAAA,iB;QAGAC,iB,GAAAA,iB;QAUAC,a,GAAAA,a;QAYAC,W,GAAAA,W;;AAtChB;;;;AACA;;;;AACA;;;;;;AACO,SAASL,UAAT,CAAoBM,QAApB,EAA8B;AACjC,QAAMC,WAAW,eAAKC,IAAL,CAAUC,SAAV,EAAqBH,QAArB,CAAjB;AACA,WAAO,aAAGI,YAAH,CAAgBH,QAAhB,EAA0B,OAA1B,CAAP;AACH;AACD;;;AAGO,SAASN,cAAT,CAAwBU,IAAxB,EAA8B;AACjC,WAAOA,KAAKC,KAAL,CAAW,GAAX,CAAP;AACH;AACM,SAASV,iBAAT,CAA2BW,IAA3B,EAAiC;AACpC,WAAOA,KAAKD,KAAL,CAAW,IAAX,EAAiBE,GAAjB,CAAqBb,cAArB,CAAP;AACH;AACM,SAASE,iBAAT,CAA2BY,GAA3B,EAAgCC,GAAhC,EAAqCC,CAArC,EAAwCC,CAAxC,EAA2C;AAC9C,WAAO;AACHC,cAAOJ,MAAME,CAAP,GAAaD,MAAME,CADtB;AAEHE,cAAOJ,MAAMC,CAAP,GAAaF,MAAMG;AAFtB,KAAP;AAIH;AACD;;;;AAIO,SAASd,aAAT,CAAuBiB,KAAvB,EAA8B;AACjC,WAAQA,QAAQC,KAAKC,EAAd,GAAoB,GAA3B;AACH;AACM,IAAMC,0BAAS,gBAAEC,OAAF,CAAU,UAACJ,KAAD;AAAA,WAAWC,KAAKP,GAAL,CAASX,cAAciB,KAAd,CAAT,CAAX;AAAA,CAAV,CAAf;AACA,IAAMK,0BAAS,gBAAED,OAAF,CAAU,UAACJ,KAAD;AAAA,WAAWC,KAAKN,GAAL,CAASZ,cAAciB,KAAd,CAAT,CAAX;AAAA,CAAV,CAAf;AACP;;;;;;AAMO,IAAMM,wCAAgB,SAAhBA,aAAgB,CAACN,KAAD,EAAQJ,CAAR,EAAWC,CAAX;AAAA,WAAiBf,kBAAkBqB,OAAOH,KAAP,CAAlB,EAAiCK,OAAOL,KAAP,CAAjC,EAAgDJ,CAAhD,EAAmDC,CAAnD,CAAjB;AAAA,CAAtB;AACA,SAASb,WAAT,CAAqBgB,KAArB,EAA4BO,KAA5B,EAAmC;AACtC,WAAOA,MAAMC,MAAN,CAAa,UAACC,OAAD,EAAUnB,IAAV,EAAgBO,CAAhB,EAAsB;AACtC,eAAOY,QAAQC,MAAR,CAAepB,KAAKkB,MAAL,CAAY,UAACG,MAAD,EAASC,KAAT,EAAgBhB,CAAhB,EAAsB;AAAA,iCAC7BU,cAAcN,KAAd,EAAqBJ,IAAI,CAAzB,EAA4BC,IAAI,CAAhC,CAD6B;AAAA,gBAC5CC,IAD4C,kBAC5CA,IAD4C;AAAA,gBACtCC,IADsC,kBACtCA,IADsC;;AAEpD,mBAAOY,OAAOD,MAAP,CAAc;AACjBZ,0BADiB;AAEjBC,0BAFiB;AAGjBa;AAHiB,aAAd,CAAP;AAKH,SAPqB,EAOnB,EAPmB,CAAf,CAAP;AAQH,KATM,EASJ,EATI,CAAP;AAUH;AACD","file":"index.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport R from 'ramda';\nexport function getCsvData(fileName) {\n    const fullPath = path.join(__dirname, fileName);\n    return fs.readFileSync(fullPath, 'utf-8');\n}\n/**\n * Converts a csv line to an array\n */\nexport function convertCsvLine(line) {\n    return line.split(';');\n}\nexport function convertCsvToArray(data) {\n    return data.split('\\n').map(convertCsvLine);\n}\nexport function rotateByCosAndSin(cos, sin, x, y) {\n    return {\n        newX: (cos * x) - (sin * y),\n        newY: (sin * x) + (cos * y)\n    };\n}\n/**\n * Converts an angle like 45ยบ and returns rad 0.785\n * @param angle\n */\nexport function getAngleToRad(angle) {\n    return (angle * Math.PI) / 180;\n}\nexport const getCos = R.memoize((angle) => Math.cos(getAngleToRad(angle)));\nexport const getSin = R.memoize((angle) => Math.sin(getAngleToRad(angle)));\n/**\n * Rotate by angle\n * @param angle\n * @param x\n * @param y\n */\nexport const rotateByAngle = (angle, x, y) => rotateByCosAndSin(getCos(angle), getSin(angle), x, y);\nexport function rotateArray(angle, array) {\n    return array.reduce((accLine, line, y) => {\n        return accLine.concat(line.reduce((accRow, value, x) => {\n            const { newX, newY } = rotateByAngle(angle, x + 1, y + 1);\n            return accRow.concat({\n                newX,\n                newY,\n                value\n            });\n        }, []));\n    }, []);\n}\n//# sourceMappingURL=index.js.map"]}