{"version":3,"sources":["../dist-esnext/index.test.js"],"names":["assert","RS","describe","it","data","getCsvData","array","convertCsvToArray","console","log","ok","newPosition","rotateByCosAndSin","equal","newX","newY","rotateByAngle","expectedArray","value","rotatedArray","rotateArray","deepEqual"],"mappings":";;AAAA;;IAAYA,M;;AACZ;;IAAYC,E;;;;AACZC,SAAS,UAAT,EAAqB,YAAM;AACvBA,aAAS,YAAT,EAAuB,YAAM;AACzBC,WAAG,OAAH,EAAY,YAAM;AACd,gBAAMC,OAAOH,GAAGI,UAAH,CAAc,iBAAd,CAAb;AACA,gBAAMC,QAAQL,GAAGM,iBAAH,CAAqBH,IAArB,CAAd;AACAI,oBAAQC,GAAR,CAAYH,KAAZ;AACAN,mBAAOU,EAAP,CAAUJ,KAAV;AACH,SALD;AAMH,KAPD;AAQAJ,aAAS,mBAAT,EAA8B,YAAM;AAChCC,WAAG,uCAAH,EAA4C,YAAM;AAC9C,gBAAMQ,cAAcV,GAAGW,iBAAH,CAAqB,IAArB,EAA2B,IAA3B,EAAiC,CAAjC,EAAoC,CAApC,CAApB;AACAZ,mBAAOa,KAAP,CAAaF,YAAYG,IAAzB,EAA+B,CAAC,IAAhC,EAAsC,OAAtC;AACAd,mBAAOa,KAAP,CAAaF,YAAYI,IAAzB,EAA+B,IAA/B,EAAqC,OAArC;AACH,SAJD;AAKH,KAND;AAOAb,aAAS,eAAT,EAA0B,YAAM;AAC5BC,WAAG,uCAAH,EAA4C,YAAM;AAC9C,gBAAMQ,cAAcV,GAAGe,aAAH,CAAiB,EAAjB,EAAqB,CAArB,EAAwB,CAAxB,CAApB;AACAhB,mBAAOa,KAAP,CAAaF,YAAYG,IAAzB,EAA+B,CAAC,kBAAhC,EAAoD,OAApD;AACAd,mBAAOa,KAAP,CAAaF,YAAYI,IAAzB,EAA+B,kBAA/B,EAAmD,OAAnD;AACH,SAJD;AAKH,KAND;AAOAb,aAAS,aAAT,EAAwB,YAAM;AAC1BC,WAAG,6BAAH,EAAkC,YAAM;AACpC,gBAAMG,QAAQ,CACV,CAAC,CAAD,EAAI,CAAJ,CADU,EAEV,CAAC,CAAD,EAAI,CAAJ,CAFU,CAAd;AAIA,gBAAMW,gBAAgB,CAClB,EAAEH,MAAM,sBAAR,EAAgCC,MAAM,iBAAtC,EAAyDG,OAAO,CAAhE,EADkB,EAElB,EAAEJ,MAAM,kBAAR,EAA4BC,MAAM,kBAAlC,EAAsDG,OAAO,CAA7D,EAFkB,EAGlB,EAAEJ,MAAM,CAAC,kBAAT,EAA6BC,MAAM,iBAAnC,EAAsDG,OAAO,CAA7D,EAHkB,EAIlB,EAAEJ,MAAM,qBAAR,EAA+BC,MAAM,gBAArC,EAAuDG,OAAO,CAA9D,EAJkB,CAAtB;AAMA,gBAAMC,eAAelB,GAAGmB,WAAH,CAAe,EAAf,EAAmBd,KAAnB,CAArB;AACAN,mBAAOqB,SAAP,CAAiBF,YAAjB,EAA+BF,aAA/B;AACH,SAbD;AAcH,KAfD;AAgBH,CAvCD;AAwCA","file":"index.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport * as RS from './index';\ndescribe('jaime-rs', () => {\n    describe('getCsvData', () => {\n        it('reads', () => {\n            const data = RS.getCsvData('../src/test.csv');\n            const array = RS.convertCsvToArray(data);\n            console.log(array);\n            assert.ok(array);\n        });\n    });\n    describe('rotateByCosAndSin', () => {\n        it('x: 2, y: 3 => newX: -0.71, newY: 3.55', () => {\n            const newPosition = RS.rotateByCosAndSin(0.71, 0.71, 2, 3);\n            assert.equal(newPosition.newX, -0.71, 'new x');\n            assert.equal(newPosition.newY, 3.55, 'new y');\n        });\n    });\n    describe('rotateByAngle', () => {\n        it('x: 2, y: 3 => newX: -0.71, newY: 3.55', () => {\n            const newPosition = RS.rotateByAngle(45, 2, 3);\n            assert.equal(newPosition.newX, -0.7071067811865472, 'new x');\n            assert.equal(newPosition.newY, 3.5355339059327378, 'new y');\n        });\n    });\n    describe('rotateArray', () => {\n        it('rotate 45ยบ [[2, 3], [4, 5]]', () => {\n            const array = [\n                [2, 3],\n                [4, 5]\n            ];\n            const expectedArray = [\n                { newX: 1.1102230246251565e-16, newY: 1.414213562373095, value: 2 },\n                { newX: 0.7071067811865477, newY: 2.1213203435596424, value: 3 },\n                { newX: -0.7071067811865474, newY: 2.121320343559643, value: 4 },\n                { newX: 2.220446049250313e-16, newY: 2.82842712474619, value: 5 }\n            ];\n            const rotatedArray = RS.rotateArray(45, array);\n            assert.deepEqual(rotatedArray, expectedArray);\n        });\n    });\n});\n//# sourceMappingURL=index.test.js.map"]}